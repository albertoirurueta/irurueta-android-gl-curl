plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'org.jetbrains.dokka'
    id 'jacoco'
    id 'org.sonarqube'
}

android {
    compileSdk 31

    defaultConfig {
        minSdk 21
        targetSdk 30
        versionCode 2
        versionName "1.0.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        def buildNumber = System.getenv("BUILD_NUMBER") as Integer ?: 0
        def apkPrefixLabels = ['glcurl', versionName, buildNumber]
        archivesBaseName = apkPrefixLabels.findAll { it != "" }.join('-')
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        unitTests.all {
            jvmArgs '-noverify'
        }
    }
}

jacoco {
    toolVersion = "$jacoco_version"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

configurations.all{
    resolutionStrategy {
        eachDependency { details ->
            def sysprops = System.getProperties()
            if (sysprops['idea.platform.prefix'] != null) {
                // Built from AndroidStudio
                // When running from Android Studio, there is no need to generate jacoco report
                // and nothing is changed so that debug variant of app can still run
            } else {
                // Built from command line
                // Enabling this allows correct jacoco report generation for instrumentation tests
                // in CI server, however prevents execution of debug variant of demo app in Android
                // Studio
                if ('org.jacoco' == details.requested.group) {
                    details.useVersion "$jacoco_version"
                }
            }
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "albertoirurueta_irurueta-android-gl-curl"
        property "sonar.projectName", "irurueta-android-gl-curl-$project.name"
        property "sonar.organization", "albertoirurueta-github"
        property "sonar.host.url", "https://sonarcloud.io"

        property "sonar.tests", ["src/test/java", "src/androidTest/java"]
        property "sonar.test.inclusions", ["**/*Test*/**", "src/androidTest/**", "src/test/**"]
        property "sonar.test.exclusions", ["**/*Test*/**", "src/androidTest/**", "src/test/**"]
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java"
        property "sonar.exclusions", '**/*Test*/**,' +
                '*.json,' +
                '**/*test*/**,' +
                '**/.gradle/**,' +
                '**/R.class'

        def libraries = project.android.sdkDirectory.getPath() + "/platforms/android-30/android.jar"
        property "sonar.libraries", libraries
        property "sonar.java.libraries", libraries
        property "sonar.java.test.libraries", libraries
        property "sonar.binaries", "build/intermediates/javac/debug/classes,build/tmp/kotlin-classes/debug"
        property "sonar.java.binaries", "build/intermediates/javac/debug/classes,build/tmp/kotlin-classes/debug"

        property "sonar.coverage.jacoco.xmlReportPaths", ["${project.buildDir}/reports/coverage/androidTest/debug/report.xml",
                                                          "${project.buildDir}/reports/coverage/test/report.xml"]
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.junit.reportsPath", "build/test-results/testDebugUnitTest, build/outputs/androidTest-results/connected"
        property "sonar.android.lint.report", "build/reports/lint-results-debug.xml"
    }
}

// Lines to add in module level build.gradle file for modules you publish

ext {
    // Provide your own coordinates here
    PUBLISH_GROUP_ID = 'com.irurueta'
    PUBLISH_VERSION = '1.0.1'
    PUBLISH_ARTIFACT_ID = 'irurueta-android-gl-curl'
}

apply from: "${rootProject.projectDir}/scripts/publish-module.gradle"

dependencies {
    implementation "androidx.core:core-ktx:$core_ktx_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "com.irurueta:irurueta-android-glutils:$irurueta_android_glutils_version"
    testImplementation "org.khronos:opengl-api:$khronos_version"
    testImplementation "androidx.test:core-ktx:$test_core_ktx_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "io.mockk:mockk:$mockk_version"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_reflect_version"
    testImplementation "org.robolectric:robolectric:$robolectric_version"
    androidTestImplementation "androidx.test.ext:junit:$ext_junit_version"
    androidTestImplementation "androidx.test:rules:$rules_version"
    androidTestImplementation "io.mockk:mockk-android:$mockk_version"
}